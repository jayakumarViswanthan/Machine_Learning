# -*- coding: utf-8 -*-
"""placement.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18ylIh1zYRYhFlscPWyYmF-oZh1Rgfcv_
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

df=pd.read_csv("collegePlace.csv")

df.head()



df.shape

df.isnull().sum()

df.info()

df.drop(['Age','Hostel'], axis=1,inplace=True)

df['Stream'].value_counts()

df['Stream'].unique()

df2=df.replace(['Electronics And Communication','Computer Science','Information Technology','Mechanical','Electrical','Civil'],[0,1,2,3,4,5])

df['Gender'].unique()

df3=df2.replace(['Male','Female'],[0,1])

df3.head()

df.describe()

df3.columns





sns.countplot('Gender',data=df)
df['Gender'].value_counts()

df3['HistoryOfBacklogs'].value_counts()



sns.countplot(x='PlacedOrNot', hue='Gender', data=df)

sns.countplot(x='PlacedOrNot', hue='HistoryOfBacklogs', data=df)

sns.set(rc={"figure.figsize":(10, 8)})
sns.countplot(x='PlacedOrNot', hue='Stream',data=df)

sns.lineplot(x='CGPA',y='PlacedOrNot',data=df)

sns.lineplot(x='CGPA',y='PlacedOrNot',hue="Gender",data=df)

sns.pairplot(df,vars=["Internships","CGPA","PlacedOrNot"],hue="Gender")

df[df['CGPA']>8]['PlacedOrNot'].value_counts()

x = df3.drop('PlacedOrNot', 1)
y = df3.PlacedOrNot



from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2,stratify=y, random_state=2)

from sklearn.linear_model import LogisticRegression
lr_model = LogisticRegression()
lr_model.fit(X_train, y_train)

y_pred = lr_model.predict(X_test)

y_pred

a = pd.DataFrame({'Actual value': y_test, 'Predicted value':y_pred})
a.head()

from sklearn import metrics 
from sklearn.metrics import classification_report

print(classification_report(y_test, y_pred))

from sklearn.metrics import accuracy_score
accuracy_score(y_pred,y_test)

from sklearn.tree import DecisionTreeClassifier  
classifier= DecisionTreeClassifier(criterion='entropy', random_state=0)  
classifier.fit(X_train, y_train)

y_pred= classifier.predict(X_test)

from sklearn.metrics import accuracy_score
accuracy_score(y_pred,y_test)

from sklearn.tree import DecisionTreeClassifier  
classifier= DecisionTreeClassifier(criterion='gini', random_state=0)  
classifier.fit(X_train, y_train)

y_pred= classifier.predict(X_test)

from sklearn.metrics import accuracy_score
accuracy_score(y_pred,y_test)

import pickle
filename = "my_model.pickle"
pickle.dump(classifier, open(filename, "wb"))
loaded_model= pickle.load(open(filename, "rb"))

loaded_model.predict(X_test)

[X_test.iloc[0]]

loaded_model.predict([X_test.iloc[1]])

from sklearn.ensemble import RandomForestClassifier  
classifier= RandomForestClassifier(n_estimators= 50, criterion="entropy")  
classifier.fit(X_train, y_train)

y_pred= classifier.predict(X_test)

from sklearn.metrics import accuracy_score
accuracy_score(y_pred,y_test)

